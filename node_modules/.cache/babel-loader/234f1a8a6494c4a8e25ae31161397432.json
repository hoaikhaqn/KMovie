{"ast":null,"code":"// Generated by PEG.js v0.11.0-master.30f3260, https://pegjs.org/\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function C() {\n    this.constructor = child;\n  }\n\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\"; // istanbul ignore next\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function (expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    class: function (expectation) {\n      var escapedParts = expectation.parts.map(function (part) {\n        return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n      });\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function () {\n      return \"any character\";\n    },\n    end: function () {\n      return \"end of input\";\n    },\n    other: function (expectation) {\n      return expectation.description;\n    },\n    not: function (expectation) {\n      return \"not \" + describeExpectation(expectation.expected);\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$startRuleFunctions = {\n    start: peg$parsestart\n  };\n  var peg$startRuleFunction = peg$parsestart;\n  var peg$c0 = \"(\";\n  var peg$c1 = \")\";\n  var peg$c2 = \"`\";\n  var peg$c3 = \"/\";\n  var peg$c4 = \"!\";\n  var peg$c5 = \"=\";\n  var peg$c6 = \">=\";\n  var peg$c7 = \">\";\n  var peg$c8 = \"<=\";\n  var peg$c9 = \"<>\";\n  var peg$c10 = \"<\";\n  var peg$c11 = \"!=\";\n  var peg$c12 = \"+\";\n  var peg$c13 = \"-\";\n  var peg$c14 = \"*\";\n  var peg$c15 = \"%\";\n  var peg$c16 = \"\\\"\";\n  var peg$c17 = \"'\";\n  var peg$c18 = \"\\\\'\";\n  var peg$c19 = \"\\\\\\\"\";\n  var peg$c20 = \"\\\\\\\\\";\n  var peg$c21 = \"\\\\/\";\n  var peg$c22 = \"\\\\b\";\n  var peg$c23 = \"\\\\f\";\n  var peg$c24 = \"\\\\n\";\n  var peg$c25 = \"\\\\r\";\n  var peg$c26 = \"\\\\t\";\n  var peg$c27 = \"\\\\u\";\n  var peg$c28 = \".\";\n  var peg$c29 = \"null\";\n  var peg$c30 = \"true\";\n  var peg$c31 = \"false\";\n  var peg$c32 = \"show\";\n  var peg$c33 = \"select\";\n  var peg$c34 = \"from\";\n  var peg$c35 = \"as\";\n  var peg$c36 = \"table\";\n  var peg$c37 = \"union\";\n  var peg$c38 = \"if\";\n  var peg$c39 = \"exists\";\n  var peg$c40 = \"where\";\n  var peg$c41 = \"group\";\n  var peg$c42 = \"by\";\n  var peg$c43 = \"order\";\n  var peg$c44 = \"limit\";\n  var peg$c45 = \"asc\";\n  var peg$c46 = \"desc\";\n  var peg$c47 = \"all\";\n  var peg$c48 = \"distinct\";\n  var peg$c49 = \"between\";\n  var peg$c50 = \"in\";\n  var peg$c51 = \"is\";\n  var peg$c52 = \"like\";\n  var peg$c53 = \"contains\";\n  var peg$c54 = \"not\";\n  var peg$c55 = \"and\";\n  var peg$c56 = \"or\";\n  var peg$c57 = \"count\";\n  var peg$c58 = \"max\";\n  var peg$c59 = \"min\";\n  var peg$c60 = \"sum\";\n  var peg$c61 = \"avg\";\n  var peg$c62 = \",\";\n  var peg$r0 = /^[^`]/;\n  var peg$r1 = /^[A-Za-z_]/;\n  var peg$r2 = /^[A-Za-z0-9_]/;\n  var peg$r3 = /^[^'\\\\\\0-\\x1F\\x7F]/;\n  var peg$r4 = /^[^\"\\\\\\0-\\x1F\\x7F]/;\n  var peg$r5 = /^[\\n\\r]/;\n  var peg$r6 = /^[0-9]/;\n  var peg$r7 = /^[1-9]/;\n  var peg$r8 = /^[0-9a-fA-F]/;\n  var peg$r9 = /^[eE]/;\n  var peg$r10 = /^[+\\-]/;\n  var peg$r11 = /^[ \\t\\n\\r]/;\n  var peg$e0 = peg$literalExpectation(\"(\", false);\n  var peg$e1 = peg$literalExpectation(\")\", false);\n  var peg$e2 = peg$otherExpectation(\"column_clause\");\n  var peg$e3 = peg$literalExpectation(\"`\", false);\n  var peg$e4 = peg$literalExpectation(\"/\", false);\n  var peg$e5 = peg$literalExpectation(\"!\", false);\n  var peg$e6 = peg$literalExpectation(\"=\", false);\n  var peg$e7 = peg$literalExpectation(\">=\", false);\n  var peg$e8 = peg$literalExpectation(\">\", false);\n  var peg$e9 = peg$literalExpectation(\"<=\", false);\n  var peg$e10 = peg$literalExpectation(\"<>\", false);\n  var peg$e11 = peg$literalExpectation(\"<\", false);\n  var peg$e12 = peg$literalExpectation(\"!=\", false);\n  var peg$e13 = peg$literalExpectation(\"+\", false);\n  var peg$e14 = peg$literalExpectation(\"-\", false);\n  var peg$e15 = peg$literalExpectation(\"*\", false);\n  var peg$e16 = peg$literalExpectation(\"%\", false);\n  var peg$e17 = peg$classExpectation([\"`\"], true, false);\n  var peg$e18 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false);\n  var peg$e19 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false);\n  var peg$e20 = peg$literalExpectation(\"\\\"\", false);\n  var peg$e21 = peg$literalExpectation(\"'\", false);\n  var peg$e22 = peg$classExpectation([\"'\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false);\n  var peg$e23 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false);\n  var peg$e24 = peg$literalExpectation(\"\\\\'\", false);\n  var peg$e25 = peg$literalExpectation(\"\\\\\\\"\", false);\n  var peg$e26 = peg$literalExpectation(\"\\\\\\\\\", false);\n  var peg$e27 = peg$literalExpectation(\"\\\\/\", false);\n  var peg$e28 = peg$literalExpectation(\"\\\\b\", false);\n  var peg$e29 = peg$literalExpectation(\"\\\\f\", false);\n  var peg$e30 = peg$literalExpectation(\"\\\\n\", false);\n  var peg$e31 = peg$literalExpectation(\"\\\\r\", false);\n  var peg$e32 = peg$literalExpectation(\"\\\\t\", false);\n  var peg$e33 = peg$literalExpectation(\"\\\\u\", false);\n  var peg$e34 = peg$otherExpectation(\"LITERAL INT\");\n  var peg$e35 = peg$literalExpectation(\".\", false);\n  var peg$e36 = peg$otherExpectation(\"NUMBER\");\n  var peg$e37 = peg$otherExpectation(\"HEX\");\n  var peg$e38 = peg$classExpectation([\"e\", \"E\"], false, false);\n  var peg$e39 = peg$classExpectation([\"+\", \"-\"], false, false);\n  var peg$e40 = peg$literalExpectation(\"NULL\", true);\n  var peg$e41 = peg$literalExpectation(\"TRUE\", true);\n  var peg$e42 = peg$literalExpectation(\"FALSE\", true);\n  var peg$e43 = peg$literalExpectation(\"SELECT\", true);\n  var peg$e44 = peg$literalExpectation(\"FROM\", true);\n  var peg$e45 = peg$literalExpectation(\"AS\", true);\n  var peg$e46 = peg$literalExpectation(\"UNION\", true);\n  var peg$e47 = peg$literalExpectation(\"WHERE\", true);\n  var peg$e48 = peg$literalExpectation(\"GROUP\", true);\n  var peg$e49 = peg$literalExpectation(\"BY\", true);\n  var peg$e50 = peg$literalExpectation(\"ORDER\", true);\n  var peg$e51 = peg$literalExpectation(\"LIMIT\", true);\n  var peg$e52 = peg$literalExpectation(\"ASC\", true);\n  var peg$e53 = peg$literalExpectation(\"DESC\", true);\n  var peg$e54 = peg$literalExpectation(\"DISTINCT\", true);\n  var peg$e55 = peg$literalExpectation(\"BETWEEN\", true);\n  var peg$e56 = peg$literalExpectation(\"IN\", true);\n  var peg$e57 = peg$literalExpectation(\"IS\", true);\n  var peg$e58 = peg$literalExpectation(\"LIKE\", true);\n  var peg$e59 = peg$literalExpectation(\"CONTAINS\", true);\n  var peg$e60 = peg$literalExpectation(\"NOT\", true);\n  var peg$e61 = peg$literalExpectation(\"AND\", true);\n  var peg$e62 = peg$literalExpectation(\"OR\", true);\n  var peg$e63 = peg$literalExpectation(\"MAX\", true);\n  var peg$e64 = peg$literalExpectation(\"MIN\", true);\n  var peg$e65 = peg$literalExpectation(\"SUM\", true);\n  var peg$e66 = peg$literalExpectation(\"AVG\", true);\n  var peg$e67 = peg$literalExpectation(\",\", false);\n  var peg$e68 = peg$otherExpectation(\"WHITE_SPACE\");\n\n  var peg$f0 = function (ast) {\n    return ast;\n  };\n\n  var peg$f1 = function (head, tail) {\n    var cur = head;\n\n    for (var i = 0; i < tail.length; i++) {\n      cur._next = tail[i][3];\n      cur = cur._next;\n    }\n\n    return head;\n  };\n\n  var peg$f2 = function (s) {\n    return s[2];\n  };\n\n  var peg$f3 = function (d, c, f, w, g, o, l) {\n    return {\n      type: 'select',\n      distinct: d,\n      columns: c,\n      from: f,\n      where: w,\n      groupby: g,\n      orderby: o,\n      limit: l\n    };\n  };\n\n  var peg$f4 = function () {\n    return '*';\n  };\n\n  var peg$f5 = function (head, tail) {\n    return createList(head, tail);\n  };\n\n  var peg$f6 = function (e, alias) {\n    return {\n      expr: e,\n      as: alias\n    };\n  };\n\n  var peg$f7 = function (i) {\n    return i;\n  };\n\n  var peg$f8 = function (l) {\n    return l;\n  };\n\n  var peg$f9 = function (group, t, alias) {\n    return {\n      db: t.db,\n      parts: (Array.isArray(t) ? t[1] : t).parts,\n      as: alias,\n      group: group ? true : false\n    };\n  };\n\n  var peg$f10 = function (dt) {\n    return {\n      parts: dt.map(function (parts) {\n        return parts[1];\n      })\n    };\n  };\n\n  var peg$f11 = function (e) {\n    return e;\n  };\n\n  var peg$f12 = function (e, d) {\n    var obj = {\n      expr: e,\n      type: 'ASC'\n    };\n\n    if (d == 'DESC') {\n      obj.type = 'DESC';\n    }\n\n    return obj;\n  };\n\n  var peg$f13 = function (lim) {\n    return lim;\n  };\n\n  var peg$f14 = function (head, tail) {\n    var el = {\n      type: 'expr_list',\n      value: undefined\n    };\n    var l = createExprList(head, tail, el);\n    el.value = l;\n    return el;\n  };\n\n  var peg$f15 = function (head, tail) {\n    return createBinaryExprChain(head, tail);\n  };\n\n  var peg$f16 = function (expr) {\n    return createUnaryExpr('NOT', expr);\n  };\n\n  var peg$f17 = function (left, rh) {\n    if (!rh) {\n      return left;\n    } else {\n      var res = null;\n\n      if (rh.type == 'arithmetic') {\n        res = createBinaryExprChain(left, rh.tail);\n      } else {\n        res = createBinaryExpr(rh.op, left, rh.right);\n      }\n\n      return res;\n    }\n  };\n\n  var peg$f18 = function (l) {\n    return {\n      type: 'arithmetic',\n      tail: l\n    };\n  };\n\n  var peg$f19 = function (op, right) {\n    return {\n      op: op,\n      right: right\n    };\n  };\n\n  var peg$f20 = function (op, begin, end) {\n    return {\n      op: op,\n      right: {\n        type: 'expr_list',\n        value: [begin, end]\n      }\n    };\n  };\n\n  var peg$f21 = function (nk) {\n    return nk[0] + ' ' + nk[2];\n  };\n\n  var peg$f22 = function (op, l) {\n    return {\n      op: op,\n      right: l\n    };\n  };\n\n  var peg$f23 = function (head, tail) {\n    return createBinaryExprChain(head, tail);\n  };\n\n  var peg$f24 = function (e) {\n    e.paren = true;\n    return e;\n  };\n\n  var peg$f25 = function (tbl, col) {\n    return {\n      type: 'column_ref',\n      table: tbl,\n      column: col\n    };\n  };\n\n  var peg$f26 = function (col) {\n    return {\n      type: 'column_ref',\n      table: '',\n      column: col\n    };\n  };\n\n  var peg$f27 = function (name) {\n    return reservedMap[name.toUpperCase()] === true;\n  };\n\n  var peg$f28 = function (name) {\n    return name;\n  };\n\n  var peg$f29 = function (chars) {\n    return chars.join('');\n  };\n\n  var peg$f30 = function (parts) {\n    return parts.join('');\n  };\n\n  var peg$f31 = function (name, f) {\n    return {\n      type: 'aggr_func',\n      name: name,\n      field: f\n    };\n  };\n\n  var peg$f32 = function (w) {\n    return w;\n  };\n\n  var peg$f33 = function () {\n    return {\n      type: 'star',\n      value: '*'\n    };\n  };\n\n  var peg$f34 = function () {\n    return {\n      type: 'null',\n      value: null\n    };\n  };\n\n  var peg$f35 = function () {\n    return {\n      type: 'bool',\n      value: true\n    };\n  };\n\n  var peg$f36 = function () {\n    return {\n      type: 'bool',\n      value: false\n    };\n  };\n\n  var peg$f37 = function (ca) {\n    return {\n      type: 'string',\n      value: ca[1].join('')\n    };\n  };\n\n  var peg$f38 = function () {\n    return \"'\";\n  };\n\n  var peg$f39 = function () {\n    return '\"';\n  };\n\n  var peg$f40 = function () {\n    return \"\\\\\";\n  };\n\n  var peg$f41 = function () {\n    return \"/\";\n  };\n\n  var peg$f42 = function () {\n    return \"\\b\";\n  };\n\n  var peg$f43 = function () {\n    return \"\\f\";\n  };\n\n  var peg$f44 = function () {\n    return \"\\n\";\n  };\n\n  var peg$f45 = function () {\n    return \"\\r\";\n  };\n\n  var peg$f46 = function () {\n    return \"\\t\";\n  };\n\n  var peg$f47 = function (h1, h2, h3, h4) {\n    return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n  };\n\n  var peg$f48 = function (n) {\n    return {\n      type: 'number',\n      value: n\n    };\n  };\n\n  var peg$f49 = function (n) {\n    return {\n      type: 'number',\n      value: n\n    };\n  };\n\n  var peg$f50 = function (int_, frac, exp) {\n    var x = parseFloat(int_ + frac + exp);\n    return x % 1 != 0 ? x.toString() : x.toString() + \".0\";\n  };\n\n  var peg$f51 = function (int_, frac) {\n    var x = parseFloat(int_ + frac);\n    return x % 1 != 0 ? x.toString() : x.toString() + \".0\";\n  };\n\n  var peg$f52 = function (int_, exp) {\n    return parseFloat(int_ + exp).toString();\n  };\n\n  var peg$f53 = function (int_) {\n    return parseFloat(int_).toString();\n  };\n\n  var peg$f54 = function (digit19, digits) {\n    return digit19 + digits;\n  };\n\n  var peg$f55 = function (op, digit19, digits) {\n    return \"-\" + digit19 + digits;\n  };\n\n  var peg$f56 = function (op, digit) {\n    return \"-\" + digit;\n  };\n\n  var peg$f57 = function (digits) {\n    return \".\" + digits;\n  };\n\n  var peg$f58 = function (e, digits) {\n    return e + digits;\n  };\n\n  var peg$f59 = function (digits) {\n    return digits.join(\"\");\n  };\n\n  var peg$f60 = function (e, sign) {\n    return e + sign;\n  };\n\n  var peg$f61 = function () {\n    return 'ASC';\n  };\n\n  var peg$f62 = function () {\n    return 'DESC';\n  };\n\n  var peg$f63 = function () {\n    return 'ALL';\n  };\n\n  var peg$f64 = function () {\n    return 'DISTINCT';\n  };\n\n  var peg$f65 = function () {\n    return 'BETWEEN';\n  };\n\n  var peg$f66 = function () {\n    return 'IN';\n  };\n\n  var peg$f67 = function () {\n    return 'IS';\n  };\n\n  var peg$f68 = function () {\n    return 'LIKE';\n  };\n\n  var peg$f69 = function () {\n    return 'CONTAINS';\n  };\n\n  var peg$f70 = function () {\n    return 'NOT';\n  };\n\n  var peg$f71 = function () {\n    return 'AND';\n  };\n\n  var peg$f72 = function () {\n    return 'OR';\n  };\n\n  var peg$f73 = function () {\n    return 'COUNT';\n  };\n\n  var peg$f74 = function () {\n    return 'MAX';\n  };\n\n  var peg$f75 = function () {\n    return 'MIN';\n  };\n\n  var peg$f76 = function () {\n    return 'SUM';\n  };\n\n  var peg$f77 = function () {\n    return 'AVG';\n  };\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$expected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return [peg$savedPos, peg$currPos];\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n\n  function peg$computeLocation(startPos, endPos) {\n    var loc = {};\n    if (peg$VALIDFILENAME) loc.filename = options.filename;\n    var startPosDetails = peg$computePosDetails(startPos);\n    loc.start = {\n      offset: startPos,\n      line: startPosDetails.line,\n      column: startPosDetails.column\n    };\n    var endPosDetails = peg$computePosDetails(endPos);\n    loc.end = {\n      offset: endPos,\n      line: endPosDetails.line,\n      column: endPosDetails.column\n    };\n    return loc;\n  }\n\n  function peg$begin() {\n    peg$expected.push({\n      pos: peg$currPos,\n      variants: []\n    });\n  }\n\n  function peg$expect(expected) {\n    var top = peg$expected[peg$expected.length - 1];\n\n    if (peg$currPos < top.pos) {\n      return;\n    }\n\n    if (peg$currPos > top.pos) {\n      top.pos = peg$currPos;\n      top.variants = [];\n    }\n\n    top.variants.push(expected);\n  }\n\n  function peg$end(invert) {\n    var expected = peg$expected.pop();\n    var top = peg$expected[peg$expected.length - 1];\n    var variants = expected.variants;\n\n    if (top.pos !== expected.pos) {\n      return;\n    }\n\n    if (invert) {\n      variants = variants.map(function (e) {\n        return e.type === \"not\" ? e.expected : {\n          type: \"not\",\n          expected: e\n        };\n      });\n    }\n\n    Array.prototype.push.apply(top.variants, variants);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$buildError() {\n    var expected = peg$expected[0];\n    var failPos = expected.pos;\n    return peg$buildStructuredError(expected.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    s2 = peg$parseunion_stmt();\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s0 = peg$f0(s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseKW_UNION();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parseselect_stmt();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseKW_UNION();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseselect_stmt();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f1(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$parseselect_stmt_nake();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      rule$expects(peg$e0);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c0;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        s4 = peg$parseselect_stmt();\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          rule$expects(peg$e1);\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s6 = peg$c1;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n          }\n\n          if (s6 !== peg$FAILED) {\n            s2 = [s2, s3, s4, s5, s6];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f2(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseKW_DISTINCT();\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      s4 = peg$parse__();\n      s5 = peg$parsecolumn_clause();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parsefrom_clause();\n\n        if (s7 === peg$FAILED) {\n          s7 = null;\n        }\n\n        s8 = peg$parse__();\n        s9 = peg$parsewhere_clause();\n\n        if (s9 === peg$FAILED) {\n          s9 = null;\n        }\n\n        s10 = peg$parse__();\n        s11 = peg$parsegroup_by_clause();\n\n        if (s11 === peg$FAILED) {\n          s11 = null;\n        }\n\n        s12 = peg$parse__();\n        s13 = peg$parseorder_by_clause();\n\n        if (s13 === peg$FAILED) {\n          s13 = null;\n        }\n\n        s14 = peg$parse__();\n        s15 = peg$parselimit_clause();\n\n        if (s15 === peg$FAILED) {\n          s15 = null;\n        }\n\n        s16 = peg$parse__();\n        peg$savedPos = s0;\n        s0 = peg$f3(s3, s5, s7, s9, s11, s13, s15);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e2);\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$begin();\n        s4 = peg$parseident_start();\n        peg$end(true);\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f4();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseCOMMA();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parsecolumn_list_item();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          s5 = peg$parseCOMMA();\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            s7 = peg$parsecolumn_list_item();\n\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n\n        peg$savedPos = s0;\n        s0 = peg$f5(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$silentFails--;\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parsealias_clause();\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f6(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    s2 = peg$parse__();\n    s3 = peg$parseident();\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s0 = peg$f7(s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parsetable_base();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f8(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_GROUP();\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      s2 = [s2, s3];\n      s1 = s2;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    s2 = peg$parsetable_name();\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$currPos;\n      rule$expects(peg$e3);\n\n      if (input.charCodeAt(peg$currPos) === 96) {\n        s3 = peg$c2;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsetable_name();\n\n        if (s4 !== peg$FAILED) {\n          rule$expects(peg$e3);\n\n          if (input.charCodeAt(peg$currPos) === 96) {\n            s5 = peg$c2;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      s4 = peg$parseKW_AS();\n\n      if (s4 === peg$FAILED) {\n        s4 = null;\n      }\n\n      s5 = peg$parse__();\n      s6 = peg$parseident();\n\n      if (s6 === peg$FAILED) {\n        s6 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f9(s1, s2, s6);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    rule$expects(peg$e4);\n\n    if (input.charCodeAt(peg$currPos) === 47) {\n      s3 = peg$c3;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n    }\n\n    if (s3 === peg$FAILED) {\n      s3 = null;\n    }\n\n    s4 = peg$parseident_name();\n\n    if (s4 !== peg$FAILED) {\n      s3 = [s3, s4];\n      s2 = s3;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        rule$expects(peg$e4);\n\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s3 = peg$c3;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        s4 = peg$parseident_name();\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f10(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseor_expr();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f11(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseKW_BY();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        s5 = peg$parsecolumn_ref_list();\n\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f8(s5);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseCOMMA();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parsecolumn_ref();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseCOMMA();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parsecolumn_ref();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f5(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseKW_BY();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        s5 = peg$parseorder_by_list();\n\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f8(s5);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseCOMMA();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parseorder_by_element();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseCOMMA();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseorder_by_element();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f5(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseor_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseKW_DESC();\n\n      if (s3 === peg$FAILED) {\n        s3 = peg$parseKW_ASC();\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f12(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseliteral_int();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f13(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseor_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseCOMMA();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parseor_expr();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseCOMMA();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseor_expr();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f14(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseKW_OR();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parseand_expr();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseKW_OR();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseand_expr();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f15(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseKW_AND();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parsenot_expr();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseKW_AND();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parsenot_expr();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f15(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      rule$expects(peg$e5);\n\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s2 = peg$c4;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$begin();\n        rule$expects(peg$e6);\n\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s4 = peg$c5;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n        }\n\n        peg$end(true);\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parsenot_expr();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f16(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecomparison_expr();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parsecomparison_op_right();\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f17(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$parsearithmetic_op_right();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecontains_op_right();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    s4 = peg$parsearithmetic_comparison_operator();\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$parse__();\n      s6 = peg$parseadditive_expr();\n\n      if (s6 !== peg$FAILED) {\n        s3 = [s3, s4, s5, s6];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        s4 = peg$parsearithmetic_comparison_operator();\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          s6 = peg$parseadditive_expr();\n\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f18(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e7);\n\n    if (input.substr(peg$currPos, 2) === peg$c6) {\n      s0 = peg$c6;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      rule$expects(peg$e8);\n\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c7;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        rule$expects(peg$e9);\n\n        if (input.substr(peg$currPos, 2) === peg$c8) {\n          s0 = peg$c8;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          rule$expects(peg$e10);\n\n          if (input.substr(peg$currPos, 2) === peg$c9) {\n            s0 = peg$c9;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n          }\n\n          if (s0 === peg$FAILED) {\n            rule$expects(peg$e11);\n\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c10;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n            }\n\n            if (s0 === peg$FAILED) {\n              rule$expects(peg$e6);\n\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c5;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n              }\n\n              if (s0 === peg$FAILED) {\n                rule$expects(peg$e12);\n\n                if (input.substr(peg$currPos, 2) === peg$c11) {\n                  s0 = peg$c11;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseadditive_expr();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f19(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BETWEEN();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseadditive_expr();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        s5 = peg$parseKW_AND();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseadditive_expr();\n\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f20(s1, s3, s7);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      s4 = peg$parseKW_LIKE();\n\n      if (s4 !== peg$FAILED) {\n        s2 = [s2, s3, s4];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f21(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      s4 = peg$parseKW_IN();\n\n      if (s4 !== peg$FAILED) {\n        s2 = [s2, s3, s4];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f21(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecontains_op() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      s4 = peg$parseKW_CONTAINS();\n\n      if (s4 !== peg$FAILED) {\n        s2 = [s2, s3, s4];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f21(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CONTAINS();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parsecomparison_expr();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f19(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseLPAREN();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        s5 = peg$parseexpr_list();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseRPAREN();\n\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f22(s1, s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecontains_op_right() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsecontains_op();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseliteral();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f22(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseadditive_operator();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parsemultiplicative_expr();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseadditive_operator();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parsemultiplicative_expr();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f15(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e13);\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c12;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      rule$expects(peg$e14);\n\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c13;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parsemultiplicative_operator();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parseprimary();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parsemultiplicative_operator();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseprimary();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f23(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e15);\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c14;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      rule$expects(peg$e4);\n\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c3;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        rule$expects(peg$e16);\n\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c15;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$parseliteral();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_func();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseLPAREN();\n\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            s3 = peg$parseor_expr();\n\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              s5 = peg$parseRPAREN();\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f24(s3);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseDOT();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        s5 = peg$parsecolumn();\n\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f25(s1, s5);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f26(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseCOMMA();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parsecolumn();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseCOMMA();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parsecolumn();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f5(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$f27(s1);\n\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = undefined;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f28(s1);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$f27(s1);\n\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = undefined;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f28(s1);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      rule$expects(peg$e3);\n\n      if (input.charCodeAt(peg$currPos) === 96) {\n        s1 = peg$c2;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        rule$expects(peg$e17);\n\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            rule$expects(peg$e17);\n\n            if (peg$r0.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          rule$expects(peg$e3);\n\n          if (input.charCodeAt(peg$currPos) === 96) {\n            s3 = peg$c2;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f29(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseident_part();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseident_part();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f30(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e18);\n\n    if (peg$r1.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e19);\n\n    if (peg$r2.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      s3 = peg$parseLPAREN();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        s5 = peg$parseident_name();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseRPAREN();\n\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f31(s1, s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_MAX();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_MIN();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f32(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c14;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f33();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$parseliteral_string();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      s5 = peg$parseCOMMA();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse__();\n        s7 = peg$parseliteral();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        s5 = peg$parseCOMMA();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          s7 = peg$parseliteral();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f5(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f34();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f35();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f36();\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    rule$expects(peg$e20);\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s2 = peg$c16;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsedouble_char();\n\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsedouble_char();\n      }\n\n      rule$expects(peg$e20);\n\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s4 = peg$c16;\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n      }\n\n      if (s4 !== peg$FAILED) {\n        s2 = [s2, s3, s4];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      rule$expects(peg$e21);\n\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s2 = peg$c17;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_char();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_char();\n        }\n\n        rule$expects(peg$e21);\n\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c17;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f37(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e22);\n\n    if (peg$r3.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_char() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e23);\n\n    if (peg$r4.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e24);\n\n    if (input.substr(peg$currPos, 2) === peg$c18) {\n      s1 = peg$c18;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f38();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      rule$expects(peg$e25);\n\n      if (input.substr(peg$currPos, 2) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f39();\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        rule$expects(peg$e26);\n\n        if (input.substr(peg$currPos, 2) === peg$c20) {\n          s1 = peg$c20;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n        }\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f40();\n        }\n\n        s0 = s1;\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          rule$expects(peg$e27);\n\n          if (input.substr(peg$currPos, 2) === peg$c21) {\n            s1 = peg$c21;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n          }\n\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f41();\n          }\n\n          s0 = s1;\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            rule$expects(peg$e28);\n\n            if (input.substr(peg$currPos, 2) === peg$c22) {\n              s1 = peg$c22;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n            }\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$f42();\n            }\n\n            s0 = s1;\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              rule$expects(peg$e29);\n\n              if (input.substr(peg$currPos, 2) === peg$c23) {\n                s1 = peg$c23;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n              }\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$f43();\n              }\n\n              s0 = s1;\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                rule$expects(peg$e30);\n\n                if (input.substr(peg$currPos, 2) === peg$c24) {\n                  s1 = peg$c24;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                }\n\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$f44();\n                }\n\n                s0 = s1;\n\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  rule$expects(peg$e31);\n\n                  if (input.substr(peg$currPos, 2) === peg$c25) {\n                    s1 = peg$c25;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                  }\n\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f45();\n                  }\n\n                  s0 = s1;\n\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    rule$expects(peg$e32);\n\n                    if (input.substr(peg$currPos, 2) === peg$c26) {\n                      s1 = peg$c26;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                    }\n\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$f46();\n                    }\n\n                    s0 = s1;\n\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      rule$expects(peg$e33);\n\n                      if (input.substr(peg$currPos, 2) === peg$c27) {\n                        s1 = peg$c27;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                      }\n\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s0 = peg$f47(s2, s3, s4, s5);\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    if (peg$r5.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f48(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseliteral_int() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e34);\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f49(s1);\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          peg$savedPos = s0;\n          s0 = peg$f50(s1, s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          peg$savedPos = s0;\n          s0 = peg$f51(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            peg$savedPos = s0;\n            s0 = peg$f52(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            peg$savedPos = s0;\n            s0 = peg$f53(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsedigit19();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f54(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        rule$expects(peg$e14);\n\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c13;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n\n        if (s1 === peg$FAILED) {\n          rule$expects(peg$e13);\n\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c12;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigit19();\n\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsedigits();\n\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f55(s1, s2, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          rule$expects(peg$e14);\n\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c13;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n          }\n\n          if (s1 === peg$FAILED) {\n            rule$expects(peg$e13);\n\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c12;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f56(s1, s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e35);\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c28;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f57(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f58(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f59(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e36);\n    peg$silentFails++;\n\n    if (peg$r6.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n    return s0;\n  }\n\n  function peg$parsedigit19() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e36);\n    peg$silentFails++;\n\n    if (peg$r7.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e37);\n    peg$silentFails++;\n\n    if (peg$r8.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e38);\n\n    if (peg$r9.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      rule$expects(peg$e39);\n\n      if (peg$r10.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f60(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e40);\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c29) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e41);\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c30) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e42);\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c31) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c32) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e43);\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c33) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e44);\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c34) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e45);\n\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c35) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c36) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e46);\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c37) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c38) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c39) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e47);\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c40) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e48);\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c41) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e49);\n\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c42) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e50);\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c43) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e51);\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e52);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c45) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f61();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e53);\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c46) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f62();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c47) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f63();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e54);\n\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c48) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f64();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e55);\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c49) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f65();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e56);\n\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c50) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f66();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e57);\n\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c51) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f67();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e58);\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c52) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f68();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONTAINS() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e59);\n\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c53) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f69();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e60);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f70();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e61);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c55) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f71();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e62);\n\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c56) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f72();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c57) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f73();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e63);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f74();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e64);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f75();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e65);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c60) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f76();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e66);\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c61) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$begin();\n      s3 = peg$parseident_start();\n      peg$end(true);\n\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f77();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e35);\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e67);\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c62;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c14;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e0);\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c0;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e1);\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c1;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e68);\n    peg$silentFails++;\n\n    if (peg$r11.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n    return s0;\n  }\n\n  function createUnaryExpr(op, e) {\n    return {\n      type: 'unary_expr',\n      operator: op,\n      expr: e\n    };\n  }\n\n  function createBinaryExpr(op, left, right) {\n    return {\n      type: 'binary_expr',\n      operator: op,\n      left: left,\n      right: right\n    };\n  }\n\n  function createList(head, tail) {\n    var result = [head];\n\n    for (var i = 0; i < tail.length; i++) {\n      result.push(tail[i][3]);\n    }\n\n    return result;\n  }\n\n  function createExprList(head, tail, room) {\n    var epList = createList(head, tail);\n    var exprList = [];\n    var ep;\n\n    for (var i = 0; i < epList.length; i++) {\n      ep = epList[i];\n      exprList.push(ep);\n    }\n\n    return exprList;\n  }\n\n  function createBinaryExprChain(head, tail) {\n    var result = head;\n\n    for (var i = 0; i < tail.length; i++) {\n      result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n    }\n\n    return result;\n  }\n\n  var reservedMap = {\n    'SHOW': true,\n    'DROP': true,\n    'SELECT': true,\n    'UPDATE': true,\n    'CREATE': true,\n    'DELETE': true,\n    'INSERT': true,\n    'REPLACE': true,\n    'EXPLAIN': true,\n    'ALL': true,\n    'DISTINCT': true,\n    'AS': true,\n    'TABLE': true,\n    'INTO': true,\n    'FROM': true,\n    'SET': true,\n    'LEFT': true,\n    'ON': true,\n    'INNER': true,\n    'JOIN': true,\n    'UNION': true,\n    'VALUES': true,\n    'EXISTS': true,\n    'WHERE': true,\n    'GROUP': true,\n    'BY': true,\n    'HAVING': true,\n    'ORDER': true,\n    'ASC': true,\n    'DESC': true,\n    'LIMIT': true,\n    'BETWEEN': true,\n    'IN': true,\n    'IS': true,\n    'LIKE': true,\n    'CONTAINS': true,\n    'NOT': true,\n    'AND': true,\n    'OR': true,\n    //literal\n    'TRUE': true,\n    'FALSE': true,\n    'NULL': true\n  };\n  peg$begin();\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$expect(peg$endExpectation());\n    }\n\n    throw peg$buildError();\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":null,"metadata":{},"sourceType":"script"}