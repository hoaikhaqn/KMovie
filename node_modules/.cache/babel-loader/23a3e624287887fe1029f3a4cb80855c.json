{"ast":null,"code":"import _slicedToArray from \"/home/h/Source/Project/movie-website/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/h/Source/Project/movie-website/src/context/index.js\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { initialState, mainReducer } from \"./reducers\";\nconst StateContext = createContext();\nexport const StateProvider = props => {\n  const _useReducer = useReducer(mainReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const getMovieById = id => {\n    console.log(\"getMovieById\");\n    firebase.getMoveItem().onSnapshot({\n      includeMetadataChanges: true\n    }, function (snapshot) {\n      snapshot.docChanges().forEach(function (change) {\n        if (change.type === \"added\") {\n          console.log(\"change.doc.data()\", change.doc.data());\n          dispatch({\n            type: \"SET_MOVIE_ITEM\",\n            movie: change.doc.data()\n          });\n        }\n      });\n    }); // dispatch({ type: \"SET_MOVIE_ITEM\", movie: rs.data() });\n  };\n\n  const value = {\n    state,\n    dispatch,\n    firebase,\n    getMovieById\n  };\n  return React.createElement(StateContext.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, props.children);\n};\nexport const useReduceState = () => useContext(StateContext);\nexport const firebase = require(\"./firebase\").default;","map":{"version":3,"sources":["/home/h/Source/Project/movie-website/src/context/index.js"],"names":["React","createContext","useContext","useReducer","initialState","mainReducer","StateContext","StateProvider","props","state","dispatch","getMovieById","id","console","log","firebase","getMoveItem","onSnapshot","includeMetadataChanges","snapshot","docChanges","forEach","change","type","doc","data","movie","value","children","useReduceState","require","default"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,YAA1C;AACA,MAAMC,YAAY,GAAGL,aAAa,EAAlC;AACA,OAAO,MAAMM,aAAa,GAAGC,KAAK,IAAI;AAAA,sBACVL,UAAU,CAACE,WAAD,EAAcD,YAAd,CADA;AAAA;AAAA,QAC7BK,KAD6B;AAAA,QACtBC,QADsB;;AAGpC,QAAMC,YAAY,GAAGC,EAAE,IAAI;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,IAAAA,QAAQ,CAACC,WAAT,GAAuBC,UAAvB,CAAkC;AAChCC,MAAAA,sBAAsB,EAAE;AADQ,KAAlC,EAEG,UAAUC,QAAV,EAAoB;AACrBA,MAAAA,QAAQ,CAACC,UAAT,GAAsBC,OAAtB,CAA8B,UAAUC,MAAV,EAAkB;AAC9C,YAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3BV,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCQ,MAAM,CAACE,GAAP,CAAWC,IAAX,EAAhC;AACAf,UAAAA,QAAQ,CAAC;AAAEa,YAAAA,IAAI,EAAE,gBAAR;AAA0BG,YAAAA,KAAK,EAAEJ,MAAM,CAACE,GAAP,CAAWC,IAAX;AAAjC,WAAD,CAAR;AACD;AACF,OALD;AAMD,KATD,EAFyB,CAYvB;AACH,GAbD;;AAcA,QAAME,KAAK,GAAG;AACZlB,IAAAA,KADY;AAEZC,IAAAA,QAFY;AAGZK,IAAAA,QAHY;AAIZJ,IAAAA;AAJY,GAAd;AAOA,SAAO,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEgB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCnB,KAAK,CAACoB,QAA5C,CAAP;AACD,CAzBM;AA0BP,OAAO,MAAMC,cAAc,GAAG,MAAM3B,UAAU,CAACI,YAAD,CAAvC;AAEP,OAAO,MAAMS,QAAQ,GAAGe,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\nimport { initialState, mainReducer } from \"./reducers\";\nconst StateContext = createContext();\nexport const StateProvider = props => {\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n\n  const getMovieById = id => {\n    console.log(\"getMovieById\");\n    firebase.getMoveItem().onSnapshot({\n      includeMetadataChanges: true\n    }, function (snapshot) {\n      snapshot.docChanges().forEach(function (change) {\n        if (change.type === \"added\") {\n          console.log(\"change.doc.data()\",change.doc.data());\n          dispatch({ type: \"SET_MOVIE_ITEM\", movie: change.doc.data() });\n        }\n      });\n    });\n      // dispatch({ type: \"SET_MOVIE_ITEM\", movie: rs.data() });\n  };\n  const value = {\n    state,\n    dispatch,\n    firebase,\n    getMovieById\n  };\n\n  return <StateContext.Provider value={value}>{props.children}</StateContext.Provider>;\n};\nexport const useReduceState = () => useContext(StateContext);\n\nexport const firebase = require(\"./firebase\").default;\n"]},"metadata":{},"sourceType":"module"}