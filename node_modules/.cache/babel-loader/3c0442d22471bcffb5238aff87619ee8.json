{"ast":null,"code":"import _defineProperty from \"/home/h/Source/Project/movie-website/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firebase-firestore\";\nimport { toast } from \"react-toastify\";\nimport Config from \"../config\";\n\nclass Firebase {\n  constructor() {\n    this.getUid = user => {\n      !user && (user = this.auth.currentUser);\n      return user && (user.email || user.providerData[0] && user.providerData[0].uid || user.uid);\n    };\n\n    this.checkSession = user => {\n      !user && (user = this.auth.currentUser); // console.log(\"user.metadata.b\", user && user.metadata.b);\n\n      return user && new Date().getTime() - user.metadata.b < 86400000; //1 hour\n    };\n\n    app.initializeApp(Config._env.firebase);\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.authGoogle = new app.auth.GoogleAuthProvider();\n    this.authGoogle.setCustomParameters({\n      prompt: \"select_account\"\n    });\n    this.authFacebook = new app.auth.FacebookAuthProvider();\n    this.authFacebook.setCustomParameters({\n      prompt: \"select_account\"\n    });\n  }\n\n  isInitialized() {\n    return new Promise(resolve => {\n      this.auth.onAuthStateChanged(resolve);\n    });\n  }\n\n  getCurrentUsername() {\n    return this.auth.currentUser;\n  }\n\n  getUserLogIn() {\n    return this.db.doc(\"account/\" + this.getUid()).get();\n  }\n\n  getQuery(collection, param, handleChange) {\n    // console.log(collection, \":\", param);\n    const api = param ? this.db.collection(collection).orderBy(param.orderBy[0], param.orderBy[1]) // .startAfter(param.startAfter||{})\n    .limit(param.limit) : this.db.collection(collection);\n    api.onSnapshot(function (doc) {\n      handleChange && handleChange(doc);\n    });\n    return api.get();\n  }\n\n  getDataInfo(id, handleChange) {\n    const api = this.db.doc(\"dataInfo/\" + id);\n    api.onSnapshot(function (doc) {\n      handleChange && handleChange(doc);\n    });\n    return api.get();\n  }\n\n  async setDocument(collection, doc) {\n    try {\n      var currentDoc = doc.id && (await this.db.doc(\"\".concat(collection, \"/\").concat(doc.id)).get()) || null;\n\n      if (currentDoc && currentDoc.exists) {\n        console.error(\"currentDoc: \", currentDoc && currentDoc.data());\n        toast.error(\"Document with this id has already exists!\");\n      } else {\n        !doc.id && (doc.id = new Date().getTime().toString());\n        this.db.collection(collection).doc(doc.id).set(_objectSpread({\n          editor: this.getUid(),\n          updated_at: new Date()\n        }, doc)).then(function (docRef) {\n          toast.success(\"Create \".concat(collection, \" successfully!\"));\n        }).catch(function (error) {\n          console.error(error);\n          toast.error(\"Cannot Create \".concat(collection, \"!\"));\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Cannot Create \".concat(collection, \"!\"));\n    }\n  }\n\n  async updateDocument(collection, doc) {\n    try {\n      var currentDoc = await this.db.doc(\"\".concat(collection, \"/\").concat(doc.id)).get();\n\n      if (currentDoc && currentDoc.exists) {\n        this.db.collection(collection).doc(doc.id).update(_objectSpread({\n          editor: this.getUid(),\n          updated_at: new Date()\n        }, doc)).then(function (docRef) {\n          toast.success(\"Update \".concat(collection, \" successfully!\"));\n        }).catch(function (error) {\n          console.error(error);\n          toast.error(\"Cannot Update \".concat(collection, \"!\"));\n        });\n      } else {\n        console.error(\"currentDoc: \", currentDoc && currentDoc.data());\n        toast.error(\"Document with this id doesn't exists!\");\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Cannot Update \".concat(collection, \"!\"));\n    }\n  }\n\n  getDocument(collection, id) {\n    return this.db.doc(\"\".concat(collection, \"/\").concat(id)).get();\n  }\n\n  deleteDocument(collection, id) {\n    this.db.collection(collection).doc(id).delete().then(function () {\n      toast.success(\"Document successfully deleted!\");\n    }).catch(function (error) {\n      console.error(\"Error removing document: \", error);\n    });\n  }\n\n  logout() {\n    return this.auth.signOut();\n  }\n\n  addUser(user) {\n    if (!this.auth.currentUser) {\n      return alert(\"Not authorized\");\n    }\n\n    return this.db.doc(\"account/\".concat(user.gmail)).set({\n      editor: user.editor || \"\",\n      email: user.gmail,\n      group: user.role,\n      updated_at: new Date()\n    });\n  }\n\n}\n\nexport default new Firebase();","map":{"version":3,"sources":["/home/h/Source/Project/movie-website/src/context/firebase.js"],"names":["app","toast","Config","Firebase","constructor","getUid","user","auth","currentUser","email","providerData","uid","checkSession","Date","getTime","metadata","b","initializeApp","_env","firebase","db","firestore","authGoogle","GoogleAuthProvider","setCustomParameters","prompt","authFacebook","FacebookAuthProvider","isInitialized","Promise","resolve","onAuthStateChanged","getCurrentUsername","getUserLogIn","doc","get","getQuery","collection","param","handleChange","api","orderBy","limit","onSnapshot","getDataInfo","id","setDocument","currentDoc","exists","console","error","data","toString","set","editor","updated_at","then","docRef","success","catch","updateDocument","update","getDocument","deleteDocument","delete","logout","signOut","addUser","alert","gmail","group","role"],"mappings":"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","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firebase-firestore\";\nimport { toast } from \"react-toastify\";\nimport Config from \"../config\";\nclass Firebase {\n  constructor() {\n    app.initializeApp(Config._env.firebase);\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.authGoogle = new app.auth.GoogleAuthProvider();\n    this.authGoogle.setCustomParameters({\n      prompt: \"select_account\"\n    });\n    this.authFacebook = new app.auth.FacebookAuthProvider();\n    this.authFacebook.setCustomParameters({\n      prompt: \"select_account\"\n    });\n  }\n  isInitialized() {\n    return new Promise(resolve => {\n      this.auth.onAuthStateChanged(resolve);\n    });\n  }\n  getCurrentUsername() {\n    return this.auth.currentUser;\n  }\n  getUserLogIn() {\n    return this.db.doc(\"account/\" + this.getUid()).get();\n  }\n  getUid = user => {\n    !user && (user = this.auth.currentUser);\n    return user && (user.email || (user.providerData[0] && user.providerData[0].uid) || user.uid);\n  };\n  checkSession = user => {\n    !user && (user = this.auth.currentUser);\n    // console.log(\"user.metadata.b\", user && user.metadata.b);\n    return user && new Date().getTime() - user.metadata.b < 86400000; //1 hour\n  };\n  getQuery(collection, param, handleChange) {\n    // console.log(collection, \":\", param);\n    const api = (\n      param ?\n        this.db\n          .collection(collection)\n          .orderBy(param.orderBy[0], param.orderBy[1])\n          // .startAfter(param.startAfter||{})\n          .limit(param.limit) :\n        this.db\n          .collection(collection)\n    );\n    api.onSnapshot(function (doc) { handleChange && handleChange(doc) });\n    return api.get()\n  }\n  getDataInfo(id, handleChange) {\n    const api = this.db.doc(\"dataInfo/\" + id)\n    api.onSnapshot(function (doc) { handleChange && handleChange(doc) });\n    return api.get()\n  }\n  async setDocument(collection, doc) {\n    try {\n      var currentDoc = (doc.id && await this.db.doc(`${collection}/${doc.id}`).get()) || null\n      if (currentDoc && currentDoc.exists) {\n        console.error(\"currentDoc: \", currentDoc && currentDoc.data())\n        toast.error(`Document with this id has already exists!`)\n      } else {\n        !doc.id && (doc.id = new Date().getTime().toString())\n        this.db.collection(collection).doc(doc.id).set({ editor: this.getUid(), updated_at: new Date(), ...doc })\n          .then(function (docRef) {\n            toast.success(`Create ${collection} successfully!`)\n          })\n          .catch(function (error) {\n            console.error(error);\n            toast.error(`Cannot Create ${collection}!`)\n          });\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(`Cannot Create ${collection}!`)\n    }\n  }\n  async updateDocument(collection, doc) {\n    try {\n      var currentDoc = await this.db.doc(`${collection}/${doc.id}`).get();\n      if (currentDoc && currentDoc.exists) {\n        this.db.collection(collection).doc(doc.id).update({ editor: this.getUid(), updated_at: new Date(), ...doc })\n          .then(function (docRef) {\n            toast.success(`Update ${collection} successfully!`)\n          })\n          .catch(function (error) {\n            console.error(error);\n            toast.error(`Cannot Update ${collection}!`)\n          });\n      } else {\n        console.error(\"currentDoc: \", currentDoc && currentDoc.data())\n        toast.error(`Document with this id doesn't exists!`)\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(`Cannot Update ${collection}!`)\n    }\n  }\n  getDocument(collection, id) {\n    return this.db.doc(`${collection}/${id}`).get();\n  }\n  deleteDocument(collection, id) {\n    this.db.collection(collection).doc(id).delete()\n      .then(function () {\n        toast.success(\"Document successfully deleted!\");\n      }).catch(function (error) {\n        console.error(\"Error removing document: \", error);\n      });\n  }\n  logout() {\n    return this.auth.signOut();\n  }\n  addUser(user) {\n    if (!this.auth.currentUser) {\n      return alert(\"Not authorized\");\n    }\n    return this.db.doc(`account/${user.gmail}`).set({\n      editor: user.editor || \"\",\n      email: user.gmail,\n      group: user.role,\n      updated_at: new Date()\n    });\n  }\n}\n\nexport default new Firebase();\n"]},"metadata":{},"sourceType":"module"}