{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nfunction applyOrderBy(queries, astOrderBy) {\n  astOrderBy.forEach(function (orderBy) {\n    utils_1.assert(orderBy.expr.type === 'column_ref', 'ORDER BY only supports ordering by field names.');\n    queries = queries.map(function (query) {\n      return query.orderBy(orderBy.expr.column, orderBy.type.toLowerCase());\n    });\n  });\n  return queries;\n}\n\nexports.applyOrderBy = applyOrderBy;\n\nfunction applyOrderByLocally(docs, astOrderBy) {\n  return docs.sort(function (doc1, doc2) {\n    return astOrderBy.reduce(function (result, orderBy) {\n      if (result !== 0) {\n        // We already found a way to sort these 2 documents, so there's\n        // no need to keep going. This doesn't actually break out of the\n        // reducer but prevents doing any further unnecessary and\n        // potentially expensive comparisons.\n        return result;\n      }\n\n      var field = orderBy.expr.column;\n\n      if (doc1[field] < doc2[field]) {\n        result = -1;\n      } else if (doc1[field] > doc2[field]) {\n        result = 1;\n      } else {\n        result = 0;\n      }\n\n      if (orderBy.type === 'DESC' && result !== 0) {\n        result = -result;\n      }\n\n      return result;\n    }, 0);\n  });\n}\n\nexports.applyOrderByLocally = applyOrderByLocally;","map":null,"metadata":{},"sourceType":"script"}