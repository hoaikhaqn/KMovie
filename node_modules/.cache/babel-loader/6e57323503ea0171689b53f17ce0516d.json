{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nvar groupby_1 = require(\"./groupby\");\n\nvar orderby_1 = require(\"./orderby\");\n\nvar limit_1 = require(\"./limit\");\n\nvar where_1 = require(\"./where\");\n\nvar VALID_AGGR_FUNCTIONS = ['MIN', 'MAX', 'SUM', 'AVG'];\n\nfunction select_(ref, ast, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var selectOp, queries, documents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          selectOp = new SelectOperation(ref, ast, options);\n          queries = selectOp.generateQueries_();\n          return [4\n          /*yield*/\n          , selectOp.executeQueries_(queries)];\n\n        case 1:\n          documents = _a.sent();\n          return [2\n          /*return*/\n          , selectOp.processDocuments_(queries, documents)];\n      }\n    });\n  });\n}\n\nexports.select_ = select_;\n\nvar SelectOperation =\n/** @class */\nfunction () {\n  function SelectOperation(_ref, _ast, options) {\n    this._ref = _ref;\n    this._ast = _ast; // We need to determine if we have to include\n    // the document's ID (__name__) in the results.\n\n    this._includeId = options.includeId || false;\n\n    if (!this._includeId && Array.isArray(_ast.columns)) {\n      for (var i = 0; i < _ast.columns.length; i++) {\n        if (_ast.columns[i].expr.type === 'column_ref') {\n          if (_ast.columns[i].expr.column === utils_1.DOCUMENT_KEY_NAME) {\n            this._includeId = true;\n            break;\n          }\n        }\n      }\n    }\n\n    if (this._includeId === void 0) {\n      this._includeId = false;\n    }\n  }\n\n  SelectOperation.prototype.generateQueries_ = function (ast) {\n    ast = ast || this._ast;\n    utils_1.assert(ast.from.parts.length % 2 === 1, '\"FROM\" needs a path to a collection (odd number of parts).');\n    var path = ast.from.parts.join('/');\n    var queries = [];\n\n    if (ast.from.group) {\n      utils_1.assert(this._ref.path === '', 'Collection group queries are only allowed from the root of the database.');\n      var firestore = utils_1.contains(this._ref, 'firestore') ? this._ref.firestore : this._ref;\n      utils_1.assert(typeof firestore.collectionGroup === 'function', \"Your version of the Firebase SDK doesn't support collection group queries.\");\n      queries.push(firestore.collectionGroup(path));\n    } else {\n      queries.push(this._ref.collection(path));\n    }\n    /*\n     * We'd need this if we end up implementing JOINs, but for now\n     * it's unnecessary since we're only querying a single collection\n    \n      // Keep track of aliased \"tables\" (collections)\n      const aliasedCollections: { [k: string]: string } = {};\n      if (ast.from[0].as.length > 0) {\n        aliasedCollections[ast.from[0].as] = colName;\n      } else {\n        aliasedCollections[colName] = colName;\n      }\n    */\n\n\n    if (ast.where) {\n      queries = where_1.applyWhere(queries, ast.where);\n    }\n\n    if (ast.orderby) {\n      queries = orderby_1.applyOrderBy(queries, ast.orderby);\n      /*\n       FIXME: the following query throws an error:\n          SELECT city, name\n          FROM restaurants\n          WHERE city IN ('Nashvile', 'Denver')\n          ORDER BY city, name\n                It happens because \"WHERE ... IN ...\" splits into 2 separate\n       queries with a \"==\" filter, and an order by clause cannot\n       contain a field with an equality filter:\n          ...where(\"city\",\"==\",\"Denver\").orderBy(\"city\")\n      */\n    } // if (ast.groupby) {\n    //   throw new Error('GROUP BY not supported yet');\n    // }\n\n\n    if (ast.limit) {\n      // First we apply the limit to each query we may have\n      // and later we'll apply it again locally to the\n      // merged set of documents, in case we end up with too many.\n      queries = limit_1.applyLimit(queries, ast.limit);\n    }\n\n    if (ast._next) {\n      utils_1.assert(ast._next.type === 'select', ' UNION statements are only supported between SELECTs.'); // This is the UNION of 2 SELECTs, so lets process the second\n      // one and merge their queries\n\n      queries = queries.concat(this.generateQueries_(ast._next)); // FIXME: The SQL parser incorrectly attributes ORDER BY to the second\n      // SELECT only, instead of to the whole UNION. Find a workaround.\n    }\n\n    return queries;\n  };\n\n  SelectOperation.prototype.executeQueries_ = function (queries) {\n    return __awaiter(this, void 0, void 0, function () {\n      var documents, seenDocuments, err_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            documents = [];\n            seenDocuments = {};\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Promise.all(queries.map(function (query) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var snapshot, numDocs, i, docSnap, docPath, docData;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , query.get()];\n\n                    case 1:\n                      snapshot = _a.sent();\n                      numDocs = snapshot.docs.length;\n\n                      for (i = 0; i < numDocs; i++) {\n                        docSnap = snapshot.docs[i];\n                        docPath = docSnap.ref.path;\n\n                        if (!utils_1.contains(seenDocuments, docPath)) {\n                          docData = docSnap.data();\n\n                          if (this._includeId) {\n                            docData[typeof this._includeId === 'string' ? this._includeId : utils_1.DOCUMENT_KEY_NAME] = docSnap.id;\n                          }\n\n                          documents.push(docData);\n                          seenDocuments[docPath] = true;\n                        }\n                      }\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _a.sent(); // TODO: handle error?\n\n            throw err_1;\n\n          case 4:\n            return [2\n            /*return*/\n            , documents];\n        }\n      });\n    });\n  };\n\n  SelectOperation.prototype.processDocuments_ = function (queries, documents) {\n    if (documents.length === 0) {\n      return [];\n    } else {\n      if (this._ast.groupby) {\n        var groupedDocs = groupby_1.applyGroupByLocally(documents, this._ast.groupby);\n        return this._processGroupedDocs(queries, groupedDocs);\n      } else {\n        return this._processUngroupedDocs(queries, documents);\n      }\n    }\n  };\n\n  SelectOperation.prototype._processUngroupedDocs = function (queries, documents) {\n    var _this = this;\n\n    if (this._ast.orderby && queries.length > 1) {\n      // We merged more than one query into a single set of documents\n      // so we need to order the documents again, this time client-side.\n      documents = orderby_1.applyOrderByLocally(documents, this._ast.orderby);\n    }\n\n    if (this._ast.limit && queries.length > 1) {\n      // We merged more than one query into a single set of documents\n      // so we need to apply the limit again, this time client-side.\n      documents = limit_1.applyLimitLocally(documents, this._ast.limit);\n    }\n\n    if (typeof this._ast.columns === 'string' && this._ast.columns === '*') {// Return all fields from the documents\n    } else if (Array.isArray(this._ast.columns)) {\n      var aggrColumns = getAggrColumns(this._ast.columns);\n\n      if (aggrColumns.length > 0) {\n        var docsGroup = new groupby_1.DocumentsGroup();\n        docsGroup.documents = documents;\n        aggregateDocuments(docsGroup, aggrColumns); /// Since there is no GROUP BY and we already computed all\n        // necessary aggregated values, at this point we only care\n        // about the first document in the list. Anything else is\n        // irrelevant.\n\n        var resultEntry = this._buildResultEntry(docsGroup.documents[0], docsGroup.aggr);\n\n        documents = [resultEntry];\n      } else {\n        documents = documents.map(function (doc) {\n          return _this._buildResultEntry(doc);\n        });\n      }\n    } else {\n      // We should never reach here\n      throw new Error('Internal error (ast.columns).');\n    }\n\n    return documents;\n  };\n\n  SelectOperation.prototype._processGroupedDocs = function (queries, groupedDocs) {\n    var _this = this;\n\n    utils_1.assert(this._ast.columns !== '*', 'Cannot \"SELECT *\" when using GROUP BY.');\n    var aggrColumns = getAggrColumns(this._ast.columns);\n    var groups = flattenGroupedDocs(groupedDocs);\n\n    if (aggrColumns.length === 0) {\n      // We're applying a GROUP BY but none of the fields requested\n      // in the SELECT are an aggregate function. In this case we\n      // just return an entry for the first document.\n      var firstGroupKey = Object.keys(groups)[0];\n      var firstGroup = groups[firstGroupKey];\n      var firstDoc = firstGroup.documents[0];\n      return [this._buildResultEntry(firstDoc)];\n    } else {\n      var results_1 = []; // TODO: ORDER BY\n\n      utils_1.assert(!this._ast.orderby, 'ORDER BY is not yet supported when using GROUP BY.'); // TODO: LIMIT\n\n      utils_1.assert(!this._ast.limit, 'LIMIT is not yet supported when using GROUP BY.');\n      Object.keys(groups).forEach(function (groupKey) {\n        var docsGroup = groups[groupKey];\n        aggregateDocuments(docsGroup, aggrColumns);\n\n        var resultEntry = _this._buildResultEntry(docsGroup.documents[0], docsGroup.aggr);\n\n        results_1.push(resultEntry);\n      });\n      return results_1;\n    }\n  };\n\n  SelectOperation.prototype._buildResultEntry = function (document, aggregate, asFieldArray) {\n    if (asFieldArray === void 0) {\n      asFieldArray = false;\n    }\n\n    var idIncluded = false;\n    var columns = this._ast.columns;\n    var resultFields = columns.reduce(function (entries, column) {\n      var fieldName;\n      var fieldAlias;\n\n      switch (column.expr.type) {\n        case 'column_ref':\n          fieldName = column.expr.column;\n          fieldAlias = utils_1.nameOrAlias(fieldName, column.as);\n          entries.push(new AliasedField(fieldName, fieldAlias, utils_1.deepGet(document, fieldName)));\n\n          if (fieldName === utils_1.DOCUMENT_KEY_NAME) {\n            idIncluded = true;\n          }\n\n          break;\n\n        case 'aggr_func':\n          vaidateAggrFunction(column.expr);\n          fieldName = column.expr.field;\n          fieldAlias = utils_1.nameOrAlias(fieldName, column.as, column.expr);\n          entries.push(new AliasedField(fieldName, fieldAlias, aggregate[column.expr.name.toLowerCase()][fieldName]));\n          break;\n\n        default:\n          throw new Error('Unsupported type in SELECT.');\n      }\n\n      return entries;\n    }, []);\n\n    if (this._includeId && !idIncluded) {\n      resultFields.push(new AliasedField(utils_1.DOCUMENT_KEY_NAME, typeof this._includeId === 'string' ? this._includeId : utils_1.DOCUMENT_KEY_NAME, utils_1.safeGet(document, utils_1.DOCUMENT_KEY_NAME)));\n    }\n\n    if (asFieldArray) {\n      return resultFields;\n    } else {\n      return resultFields.reduce(function (doc, field) {\n        doc[field.alias] = field.value;\n        return doc;\n      }, {});\n    }\n  };\n\n  return SelectOperation;\n}();\n\nexports.SelectOperation = SelectOperation;\n/*************************************************/\n\nfunction aggregateDocuments(docsGroup, functions) {\n  var numDocs = docsGroup.documents.length;\n\n  var _loop_1 = function (i) {\n    var doc = docsGroup.documents[i]; // If the same field is used in more than one aggregate function\n    // we don't want to sum its value more than once.\n\n    var skipSum = {};\n    functions.forEach(function (fn) {\n      var value = utils_1.safeGet(doc, fn.field);\n      var isNumber = !Number.isNaN(value);\n\n      switch (fn.name) {\n        case 'AVG':\n          // Lets put a value so that later we know we have to compute this avg\n          docsGroup.aggr.avg[fn.field] = 0;\n        // tslint:disable-next-line:no-switch-case-fall-through\n\n        case 'SUM':\n          if (utils_1.safeGet(skipSum, fn.field) !== true) {\n            skipSum[fn.field] = true;\n\n            if (!utils_1.contains(docsGroup.aggr.total, fn.field)) {\n              docsGroup.aggr.total[fn.field] = 0;\n              docsGroup.aggr.sum[fn.field] = 0;\n            }\n\n            value = Number(value);\n            utils_1.assert(!Number.isNaN(value), \"Can't compute aggregate function \" + fn.name + \"(\" + fn.field + \") because some values are not numbers.\");\n            docsGroup.aggr.total[fn.field] += 1;\n            docsGroup.aggr.sum[fn.field] += value; // FIXME: if the numbers are big we could easily go out of bounds in this sum\n          }\n\n          break;\n\n        case 'MIN':\n          utils_1.assert(isNumber || typeof value === 'string', \"Aggregate function MIN(\" + fn.field + \") can only be performed on numbers or strings\");\n\n          if (!utils_1.contains(docsGroup.aggr.min, fn.field)) {\n            docsGroup.aggr.min[fn.field] = value;\n          } else {\n            if (!Number.isNaN(docsGroup.aggr.min[fn.field])) {\n              // The current minimum is a number\n              utils_1.assert(isNumber, \"Can't compute aggregate function MIN(\" + fn.field + \") because some values are not numbers.\");\n              value = Number(value);\n            }\n\n            if (value < docsGroup.aggr.min[fn.field]) {\n              docsGroup.aggr.min[fn.field] = value;\n            }\n          }\n\n          break;\n\n        case 'MAX':\n          utils_1.assert(isNumber || typeof value === 'string', \"Aggregate function MAX(\" + fn.field + \") can only be performed on numbers or strings\");\n\n          if (!utils_1.contains(docsGroup.aggr.max, fn.field)) {\n            docsGroup.aggr.max[fn.field] = value;\n          } else {\n            if (!Number.isNaN(docsGroup.aggr.max[fn.field])) {\n              // The current maximum is a number\n              utils_1.assert(isNumber, \"Can't compute aggregate function MAX(\" + fn.field + \") because some values are not numbers.\");\n              value = Number(value);\n            }\n\n            if (value > docsGroup.aggr.max[fn.field]) {\n              docsGroup.aggr.max[fn.field] = value;\n            }\n          }\n\n          break;\n      }\n    });\n  };\n\n  for (var i = 0; i < numDocs; i++) {\n    _loop_1(i);\n  } // Compute any necessary averages\n\n\n  Object.keys(docsGroup.aggr.avg).forEach(function (group) {\n    docsGroup.aggr.avg[group] = docsGroup.aggr.sum[group] / docsGroup.aggr.total[group];\n  });\n  return docsGroup;\n}\n\nfunction getAggrColumns(columns) {\n  var aggrColumns = [];\n\n  if (columns !== '*') {\n    columns.forEach(function (astColumn) {\n      if (astColumn.expr.type === 'aggr_func') {\n        vaidateAggrFunction(astColumn.expr);\n        aggrColumns.push(astColumn.expr);\n      } else {\n        utils_1.assert(astColumn.expr.type === 'column_ref', 'Only field names and aggregate functions are supported in SELECT statements.');\n      }\n    });\n  }\n\n  return aggrColumns;\n}\n\nfunction vaidateAggrFunction(aggrFn) {\n  // TODO: support COUNT, then remove this assert\n  utils_1.assert(aggrFn.name !== 'COUNT', 'Aggregate function COUNT is not yet supported.');\n  utils_1.assert(VALID_AGGR_FUNCTIONS.includes(aggrFn.name), \"Unknown aggregate function '\" + aggrFn.name + \"'.\");\n  utils_1.assert( // tslint:disable-next-line: strict-type-predicates\n  typeof aggrFn.field === 'string', \"Unsupported type in aggregate function '\" + aggrFn.name + \"'.\");\n}\n\nfunction flattenGroupedDocs(groupedDocs) {\n  var result = {};\n\n  for (var prop in groupedDocs) {\n    if (!utils_1.contains(groupedDocs, prop)) {\n      continue;\n    }\n\n    if (!(groupedDocs[prop] instanceof groupby_1.DocumentsGroup)) {\n      var flatInner = flattenGroupedDocs(groupedDocs[prop]);\n\n      for (var innerProp in flatInner) {\n        if (!utils_1.contains(flatInner, innerProp)) {\n          continue;\n        }\n\n        result[prop + '$$' + innerProp] = flatInner[innerProp];\n      }\n    } else {\n      result[prop] = groupedDocs[prop];\n    }\n  }\n\n  return result;\n}\n/**\n * Represents a field (prop) in a document.\n * It stores the original field name, the assigned alias, and the value.\n *\n * This is necessary in order to properly apply ORDER BY once\n * a result set has been built.\n */\n\n\nvar AliasedField =\n/** @class */\nfunction () {\n  function AliasedField(name, alias, value) {\n    this.name = name;\n    this.alias = alias;\n    this.value = value;\n  }\n\n  return AliasedField;\n}();","map":null,"metadata":{},"sourceType":"script"}