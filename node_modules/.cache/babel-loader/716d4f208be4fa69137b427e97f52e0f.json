{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DOCUMENT_KEY_NAME = '__name__';\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexports.assert = assert;\n\nfunction contains(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexports.contains = contains;\n\nfunction safeGet(obj, prop) {\n  if (contains(obj, prop)) return obj[prop];\n}\n\nexports.safeGet = safeGet;\n\nfunction deepGet(obj, path) {\n  var value = obj;\n  var props = path.split('.');\n  props.some(function (prop) {\n    value = safeGet(value, prop); // By using \"some\" instead of \"forEach\", we can return\n    // true whenever we want to break out of the loop.\n\n    return typeof value === void 0;\n  });\n  return value;\n}\n\nexports.deepGet = deepGet;\n\nfunction astValueToNative(astValue) {\n  var value;\n\n  switch (astValue.type) {\n    case 'bool':\n    case 'null':\n    case 'string':\n      value = astValue.value;\n      break;\n\n    case 'number':\n      value = Number(astValue.value);\n      break;\n\n    default:\n      throw new Error('Unsupported value type in WHERE clause.');\n  }\n\n  return value;\n}\n\nexports.astValueToNative = astValueToNative;\n/**\n * Adapted from: https://github.com/firebase/firebase-ios-sdk/blob/14dd9dc2704038c3bf702426439683cee4dc941a/Firestore/core/src/firebase/firestore/util/string_util.cc#L23-L40\n */\n\nfunction prefixSuccessor(prefix) {\n  // We can increment the last character in the string and be done\n  // unless that character is 255 (0xff), in which case we have to erase the\n  // last character and increment the previous character, unless that\n  // is 255, etc. If the string is empty or consists entirely of\n  // 255's, we just return the empty string.\n  var limit = prefix;\n\n  while (limit.length > 0) {\n    var index = limit.length - 1;\n\n    if (limit[index] === '\\xff') {\n      limit = limit.slice(0, -1);\n    } else {\n      limit = limit.substr(0, index) + String.fromCharCode(limit.charCodeAt(index) + 1);\n      break;\n    }\n  }\n\n  return limit;\n}\n\nexports.prefixSuccessor = prefixSuccessor;\n\nfunction nameOrAlias(name, alias, aggrFn) {\n  if (alias !== null && alias.length > 0) {\n    return alias;\n  }\n\n  if (!aggrFn) {\n    return name;\n  }\n\n  return aggrFn.name + \"(\" + name + \")\";\n}\n\nexports.nameOrAlias = nameOrAlias;","map":null,"metadata":{},"sourceType":"script"}