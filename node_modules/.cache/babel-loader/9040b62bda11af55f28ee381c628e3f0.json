{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire(\"firebase/firestore\");\n\nvar sql_parser_1 = require(\"./sql-parser\");\n\nvar utils_1 = require(\"./utils\");\n\nvar select_1 = require(\"./select\");\n\nvar FireSQL =\n/** @class */\nfunction () {\n  function FireSQL(ref, _options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n\n    this._options = _options;\n    /*\n       We initially used `instanceof` to determine the object type, but that\n       only allowed using the client SDK. Doing it this way we can support\n       both the client and the admin SDKs.\n       */\n\n    if (typeof ref.doc === 'function') {\n      // It's an instance of firebase.firestore.Firestore\n      try {\n        this._ref = ref.doc('/');\n      } catch (err) {\n        // If the Firestore instance we get is from the Admin SDK, it throws\n        // an error if we call `.doc(\"/\")` on it. In that case we just treat\n        // it as a firebase.firestore.DocumentReference\n        this._ref = ref;\n      }\n    } else if (typeof ref.collection === 'function') {\n      // It's an instance of firebase.firestore.DocumentReference\n      this._ref = ref;\n    } else {\n      throw new Error('The first parameter needs to be a Firestore object ' + ' or a Firestore document reference .');\n    }\n  }\n\n  Object.defineProperty(FireSQL.prototype, \"ref\", {\n    get: function () {\n      return this._ref;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FireSQL.prototype, \"firestore\", {\n    get: function () {\n      return this._ref.firestore;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FireSQL.prototype, \"options\", {\n    get: function () {\n      return this._options;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FireSQL.prototype.query = function (sql, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var ast;\n      return __generator(this, function (_a) {\n        utils_1.assert( // tslint:disable-next-line: strict-type-predicates\n        typeof sql === 'string' && sql.length > 0, 'query() expects a non-empty string.');\n        ast = sql_parser_1.parse(sql);\n\n        if (ast.type === 'select') {\n          return [2\n          /*return*/\n          , select_1.select_(this._ref, ast, __assign({}, this._options, options))];\n        } else {\n          throw new Error(\"\\\"\" + ast.type.toUpperCase() + \"\\\" statements are not supported.\");\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  FireSQL.prototype.toJSON = function () {\n    return {\n      ref: this._ref,\n      options: this._options\n    };\n  };\n\n  return FireSQL;\n}();\n\nexports.FireSQL = FireSQL;","map":null,"metadata":{},"sourceType":"script"}