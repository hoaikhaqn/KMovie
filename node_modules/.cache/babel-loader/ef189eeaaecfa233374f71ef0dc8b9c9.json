{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar createClass = require('create-react-class');\n\nvar sizerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'scroll',\n  whiteSpace: 'pre'\n};\nvar AutosizeInput = createClass({\n  propTypes: {\n    className: PropTypes.string,\n    // className for the outer element\n    defaultValue: PropTypes.any,\n    // default field value\n    inputClassName: PropTypes.string,\n    // className for the input element\n    inputRef: PropTypes.func,\n    // ref callback for the input element\n    inputStyle: PropTypes.object,\n    // css styles for the input element\n    minWidth: PropTypes.oneOfType([// minimum width for input element\n    PropTypes.number, PropTypes.string]),\n    onAutosize: PropTypes.func,\n    // onAutosize handler: function(newWidth) {}\n    onChange: PropTypes.func,\n    // onChange handler: function(newValue) {}\n    placeholder: PropTypes.string,\n    // placeholder text\n    placeholderIsMinWidth: PropTypes.bool,\n    // don't collapse size to less than the placeholder\n    style: PropTypes.object,\n    // css styles for the outer element\n    value: PropTypes.any\n  },\n  // field value\n  getDefaultProps: function getDefaultProps() {\n    return {\n      minWidth: 1\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      inputWidth: this.props.minWidth,\n      inputId: '_' + Math.random().toString(36).substr(2, 12)\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.mounted = true;\n    this.copyInputStyles();\n    this.updateInputWidth();\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n    if (prevState.inputWidth !== this.state.inputWidth) {\n      if (typeof this.props.onAutosize === 'function') {\n        this.props.onAutosize(this.state.inputWidth);\n      }\n    }\n\n    this.updateInputWidth();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.mounted = false;\n  },\n  inputRef: function inputRef(el) {\n    this.input = el;\n\n    if (typeof this.props.inputRef === 'function') {\n      this.props.inputRef(el);\n    }\n  },\n  placeHolderSizerRef: function placeHolderSizerRef(el) {\n    this.placeHolderSizer = el;\n  },\n  sizerRef: function sizerRef(el) {\n    this.sizer = el;\n  },\n  copyInputStyles: function copyInputStyles() {\n    if (!this.mounted || !window.getComputedStyle) {\n      return;\n    }\n\n    var inputStyle = this.input && window.getComputedStyle(this.input);\n\n    if (!inputStyle) {\n      return;\n    }\n\n    var widthNode = this.sizer;\n    widthNode.style.fontSize = inputStyle.fontSize;\n    widthNode.style.fontFamily = inputStyle.fontFamily;\n    widthNode.style.fontWeight = inputStyle.fontWeight;\n    widthNode.style.fontStyle = inputStyle.fontStyle;\n    widthNode.style.letterSpacing = inputStyle.letterSpacing;\n    widthNode.style.textTransform = inputStyle.textTransform;\n\n    if (this.props.placeholder) {\n      var placeholderNode = this.placeHolderSizer;\n      placeholderNode.style.fontSize = inputStyle.fontSize;\n      placeholderNode.style.fontFamily = inputStyle.fontFamily;\n      placeholderNode.style.fontWeight = inputStyle.fontWeight;\n      placeholderNode.style.fontStyle = inputStyle.fontStyle;\n      placeholderNode.style.letterSpacing = inputStyle.letterSpacing;\n      placeholderNode.style.textTransform = inputStyle.textTransform;\n    }\n  },\n  updateInputWidth: function updateInputWidth() {\n    if (!this.mounted || !this.sizer || typeof this.sizer.scrollWidth === 'undefined') {\n      return;\n    }\n\n    var newInputWidth = undefined;\n\n    if (this.props.placeholder && (!this.props.value || this.props.value && this.props.placeholderIsMinWidth)) {\n      newInputWidth = Math.max(this.sizer.scrollWidth, this.placeHolderSizer.scrollWidth) + 2;\n    } else {\n      newInputWidth = this.sizer.scrollWidth + 2;\n    }\n\n    if (newInputWidth < this.props.minWidth) {\n      newInputWidth = this.props.minWidth;\n    }\n\n    if (newInputWidth !== this.state.inputWidth) {\n      this.setState({\n        inputWidth: newInputWidth\n      });\n    }\n  },\n  getInput: function getInput() {\n    return this.input;\n  },\n  focus: function focus() {\n    this.input.focus();\n  },\n  blur: function blur() {\n    this.input.blur();\n  },\n  select: function select() {\n    this.input.select();\n  },\n  render: function render() {\n    var sizerValue = [this.props.defaultValue, this.props.value, ''].reduce(function (previousValue, currentValue) {\n      if (previousValue !== null && previousValue !== undefined) {\n        return previousValue;\n      }\n\n      return currentValue;\n    });\n    var wrapperStyle = this.props.style || {};\n    if (!wrapperStyle.display) wrapperStyle.display = 'inline-block';\n\n    var inputStyle = _extends({}, this.props.inputStyle);\n\n    inputStyle.width = this.state.inputWidth + 'px';\n    inputStyle.boxSizing = 'content-box';\n\n    var inputProps = _extends({}, this.props);\n\n    inputProps.className = this.props.inputClassName;\n    inputProps.style = inputStyle; // ensure props meant for `AutosizeInput` don't end up on the `input`\n\n    delete inputProps.inputClassName;\n    delete inputProps.inputStyle;\n    delete inputProps.minWidth;\n    delete inputProps.onAutosize;\n    delete inputProps.placeholderIsMinWidth;\n    delete inputProps.inputRef;\n    return React.createElement('div', {\n      className: this.props.className,\n      style: wrapperStyle\n    }, React.createElement('style', {\n      dangerouslySetInnerHTML: {\n        __html: ['input#' + this.state.id + '::-ms-clear {display: none;}'].join('\\n')\n      }\n    }), React.createElement('input', _extends({\n      id: this.state.id\n    }, inputProps, {\n      ref: this.inputRef\n    })), React.createElement('div', {\n      ref: this.sizerRef,\n      style: sizerStyle\n    }, sizerValue), this.props.placeholder ? React.createElement('div', {\n      ref: this.placeHolderSizerRef,\n      style: sizerStyle\n    }, this.props.placeholder) : null);\n  }\n});\nmodule.exports = AutosizeInput;","map":null,"metadata":{},"sourceType":"script"}